---
title: "Diagnostic - one model"
author: "Erica Goto"
date: "2/10/2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

### Library & Dataset
```{r, warning=FALSE,  include=FALSE}
library(MASS)
library(tidyverse)
library(readxl)
library(car)
library(stats)
library(nnet)
library(glmnet)
library(boot)
library(nlstools)
library (ggplot2)
library(sf)
library(rstanarm)
library(caret)
library(nnet)
library(sure)
library(Hmisc)
library(stargazer)
library(rms)

OLR <- read_excel("training_set_olr_doble.xlsx")
validation2 <- read_excel("validation2.xlsx")
```



Using OLR
```{r, warning=FALSE,  include=FALSE}
OLR$angle <- as.factor(OLR$angle) #it is not factor, categories are independent in order of importance. The same with density
OLR$building <-factor(OLR$building, levels=c("B", "W", "M"), ordered=TRUE) 

#if (OLR$building  == "B") {0}
#if(OLR$building  == "W") {1}
#if(OLR$building  == "M") {2}
OLR$building <-as.integer(OLR$building)

OLR$EN <- as.logical(OLR$EN)
OLR$density <- as.factor(OLR$density)
OLR$TC <- as.logical(OLR$TC)
OLR$TC_mature_Soil <- as.logical(OLR$TC_mature_Soil)
OLR$TC_saprolito <- as.logical(OLR$TC_saprolito)
OLR$TC_weath_rock <- as.logical(OLR$TC_weath_rock)
OLR$TC_rock <- as.logical(OLR$TC_rock)
OLR$TC_geol_desfav <- as.logical(OLR$TC_geol_desfav)
OLR$Taterro <- as.logical(OLR$Taterro)
OLR$DepEncosta <- as.logical(OLR$DepEncosta)
OLR$DepEncNatural <- as.logical(OLR$DepEncNatural)
OLR$DepTaludeCorte <- as.logical(OLR$DepTaludeCorte)
OLR$DepTaludeAterro <- as.logical(OLR$DepTaludeAterro)
OLR$aterro <- as.logical(OLR$aterro)
OLR$lixo <- as.logical(OLR$lixo)
OLR$entulho <- as.logical(OLR$entulho)
OLR$crack <- as.logical(OLR$crack)
OLR$belly_wall <- as.logical(OLR$belly_wall)
OLR$scars <- as.logical(OLR$scars)
OLR$conc_rainfall_water <- as.logical(OLR$conc_rainfall_water)
OLR$drawback <- as.logical(OLR$drawback)
OLR$tilted <- as.logical(OLR$tilted)
OLR$fracture <- as.logical(OLR$fracture)
OLR$wastewater <- as.logical(OLR$wastewater)
OLR$leak <- as.logical(OLR$leak)
OLR$drainage <- factor(OLR$drainage, levels=c("Y", "P", "N"), ordered=TRUE)
#if(OLR$drainage  == "Y") {0}
#if(OLR$drainage  == "P"){1}
#if(OLR$drainage  == "N"){2}
OLR$drainage <- as.integer(OLR$drainage)

OLR$tree <- as.logical(OLR$tree)
OLR$ground_veg <- as.logical(OLR$ground_veg)
OLR$deforestation <- as.logical(OLR$deforestation)
OLR$banana <- as.logical(OLR$banana)
OLR$risk <- factor(OLR$risk, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)


```


validation2

```{r, warning=FALSE,  include=FALSE}
validation2$angle <- as.factor(validation2$angle) #it is not factor, categories are independent in order of importance. The same with density
validation2$building <-factor(validation2$building, levels=c("B", "W", "M"), ordered=TRUE) 

#if (OLR$building  == "B") {0}
#if(OLR$building  == "W") {1}
#if(OLR$building  == "M") {2}
validation2$building <-as.integer(validation2$building)

validation2$EN <- as.logical(validation2$EN)
validation2$density <- as.factor(validation2$density)
validation2$TC <- as.logical(validation2$TC)
validation2$TC_mature_Soil <- as.logical(validation2$TC_mature_Soil)
validation2$TC_saprolito <- as.logical(validation2$TC_saprolito)
validation2$TC_weath_rock <- as.logical(validation2$TC_weath_rock)
validation2$TC_rock <- as.logical(validation2$TC_rock)
validation2$TC_geol_desfav <- as.logical(validation2$TC_geol_desfav)
validation2$Taterro <- as.logical(validation2$Taterro)
validation2$DepEncosta <- as.logical(validation2$DepEncosta)
validation2$DepEncNatural <- as.logical(validation2$DepEncNatural)
validation2$DepTaludeCorte <- as.logical(validation2$DepTaludeCorte)
validation2$DepTaludeAterro <- as.logical(validation2$DepTaludeAterro)
validation2$aterro <- as.logical(validation2$aterro)
validation2$lixo <- as.logical(validation2$lixo)
validation2$entulho <- as.logical(validation2$entulho)
validation2$crack <- as.logical(validation2$crack)
validation2$belly_wall <- as.logical(validation2$belly_wall)
validation2$scars <- as.logical(validation2$scars)
validation2$conc_rainfall_water <- as.logical(validation2$conc_rainfall_water)
validation2$drawback <- as.logical(validation2$drawback)
validation2$tilted <- as.logical(validation2$tilted)
validation2$fracture <- as.logical(validation2$fracture)
validation2$wastewater <- as.logical(validation2$wastewater)
validation2$leak <- as.logical(validation2$leak)
validation2$drainage <- factor(validation2$drainage, levels=c("Y", "P", "N"), ordered=TRUE)
#if(OLR$drainage  == "Y") {0}
#if(OLR$drainage  == "P"){1}
#if(OLR$drainage  == "N"){2}
validation2$drainage <- as.integer(validation2$drainage)

validation2$tree <- as.logical(validation2$tree)
validation2$ground_veg <- as.logical(validation2$ground_veg)
validation2$deforestation <- as.logical(validation2$deforestation)
validation2$banana <- as.logical(validation2$banana)
validation2$risk <- factor(validation2$risk, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)


```




##OLR Equation 5
- Using all variables

##Inspect Dataset Using Training and Validation

```{r, warning=FALSE,  include=FALSE}
#set.seed(1234)
training.samples <- OLR$risk %>%
        createDataPartition(p=0.75, list=FALSE)
train.data  <- OLR[training.samples, ]
test.data <- OLR[-training.samples, ]
```


```{r, fig.height=5, fig.width=7}
vclust <- varclus (~ angle + building+density+EN +TC + TC_mature_Soil + TC_saprolito +  TC_weath_rock + TC_rock + TC_geol_desfav + Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte + DepTaludeAterro + aterro + lixo + entulho + crack + belly_wall + scars + drawback + tilted + fracture + conc_rainfall_water + wastewater + leak + septic_tank + drainage + tree + ground_veg + deforestation + banana , data=train.data)

p <- plot(vclust)
```


```{r, fig.height= 10, fig.width= 7, warning=FALSE}
par(mfrow=c(4,4))
plot.xmean.ordinaly (risk~angle + building+density+EN +TC + TC_mature_Soil + TC_saprolito +  TC_weath_rock + TC_rock + TC_geol_desfav + Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte + DepTaludeAterro + aterro + lixo + entulho + crack + belly_wall + scars + drawback + tilted + fracture + conc_rainfall_water + wastewater + leak + septic_tank + drainage + tree + ground_veg + deforestation + banana, data=train.data, cr=TRUE , subn=FALSE , cex.points =0.65)


#angle + building+density+EN +TC + TC_mature_Soil + TC_saprolito +  TC_weath_rock + TC_rock + TC_geol_desfav + Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte + DepTaludeAterro + aterro + lixo + entulho + crack + belly_wall + scars + drawback + tilted + fracture + conc_rainfall_water + wastewater + leak + septic_tank + drainage + tree + ground_veg + deforestation + banana 
```

Diagnostic 2: Proportion (-5% of one of the parameters)
	TC_weath_rock, TC_rock_TC_geol_desf, fracture

(include here)


Parameters seems okay:building+ density+EN+TC+
                  TC_mature_Soil + TC_saprolito + TC_geol_desfav + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + gound_veg + deforestation
Parameters so/so: angled, septic_tank, banana
Parameters very wrong: TC_weath_rock, TC, TC_rock, fracture, drainage



## Equation 1
- consider all parameter okay from first diagnostic: 


```{r}
f1 <- lrm(risk ~ building+ density+EN+
                  TC_mature_Soil + TC_saprolito + TC_geol_desfav + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation
          , data=train.data, x=TRUE , y=TRUE)
# x=TRUE, y=TRUE used by resid() below 
#print (f1 , latex =TRUE , coefs =5)
stargazer(anova(f1), type="text", style="default")

eq_OLR_01 <- polr(risk~building+ density+EN+
                  TC_mature_Soil + TC_saprolito + TC_geol_desfav + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation, data= train.data
           ,  method = "logistic", Hess = TRUE)
ctable <- coef(summary(eq_OLR_01))

p<- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE*2) #computes p value
ctable <- cbind(ctable, "p value" = p )

ctable
stargazer((ctable), type="text", style="default", digits = 2)

```

## Equation 2
- parameters okay and so/so
- porportion

```{r, fig.height= 15, fig.width= 7}
par(mfrow=c(9,3))
plot.xmean.ordinaly (risk~ building+ density+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank+ banana
          ,data=train.data, cr=TRUE , subn=FALSE , cex.points =0.65)
```

```{r}
f2 <- lrm(risk ~ building+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank+ banana
          , data=train.data, x=TRUE , y=TRUE)
# x=TRUE, y=TRUE used by resid() below 
#print (f2 , latex =TRUE , coefs =5)
eq_OLR_02 <- polr(risk ~ building+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank+ banana, data= train.data
           ,  method = "logistic", Hess = TRUE)
ctable <- coef(summary(eq_OLR_02))

p<- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE*2) #computes p value
ctable <- cbind(ctable, "p value" = p )

ctable
stargazer((ctable), type="text", style="default")
stargazer(anova(f2), type="text", style="default")
```



## Equation 3
- parameters okay and so/so
- porportion
- p-value based equation 2  > 0.12(banana, septic_tank, deforestation, leak,  entulho, aterro, DepTaludeCorte, DepTaludeAterro, Taterro, Tc_saprolito, density)

```{r, fig.height= 10, fig.width= 7}
par(mfrow=c(5,3))
plot.xmean.ordinaly (risk~ building + EN + TC_mature_Soil 
 + crack + belly_wall + tilted + lixo + 
     scars + drawback  + conc_rainfall_water + wastewater + 
    + tree + ground_veg + angle 
          ,data=train.data, cr=TRUE , subn=FALSE , cex.points =0.65)



```
- TC is not okay

```{r}
f3 <- lrm(risk ~ building + EN + TC_mature_Soil 
 + crack + belly_wall + tilted + lixo + 
     scars + drawback  + conc_rainfall_water + wastewater + 
    + tree + ground_veg + angle  
          , data=train.data, x=TRUE , y=TRUE)
# x=TRUE, y=TRUE used by resid() below 

eq_OLR_03 <- polr(risk ~building + EN + TC_mature_Soil 
 + crack + belly_wall + tilted + lixo + 
     scars + drawback  + conc_rainfall_water + wastewater + 
    + tree + ground_veg + angle,
 data= train.data
           ,  method = "logistic", Hess = TRUE)
ctable <- coef(summary(eq_OLR_03))


p<- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE*2) #computes p value
ctable <- cbind(ctable, "p value" = p )

ctable


stargazer((ctable), type="text", style="default")
#print (f3 , latex =TRUE , coefs =5)

stargazer(anova(f3), type="text", style="default")

```



## Equation 4
- p-value equation 3 > 0.05 (tilted, drawback, tree)
- consider proportion 
- paremeters okay & so/so
- fashion order



```{r, fig.height=10, fig.width=7}
par(mfrow=c(5,3))
plot.xmean.ordinaly (risk ~  building+EN+
                   + Taterro +
                  + DepTaludeCorte + lixo+
                  + belly_wall + scars + conc_rainfall_water + wastewater
                  + ground_veg + deforestation +
                  angle 
          ,data=train.data, cr=TRUE , subn=FALSE , cex.points =0.65)
```


```{r}

f4 <- lrm(risk ~  building+EN+
                   + Taterro +
                  + DepTaludeCorte + lixo+
                  + belly_wall + scars + conc_rainfall_water + wastewater
                  + ground_veg + deforestation +
                  angle 
           ,data=train.data, x=TRUE , y=TRUE)
# x=TRUE, y=TRUE used by resid() below 
#print (f4 , latex =TRUE , coefs =5)
stargazer(anova(f4), type="text", style="default")


eq_OLR_04 <- polr(risk~ building+EN+
                   + Taterro +
                  + DepTaludeCorte + lixo+
                  + belly_wall + scars + conc_rainfall_water + wastewater
                  + ground_veg + deforestation +
                  angle 
                  , data= train.data
           ,  method = "logistic", Hess = TRUE)
p<- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE*2) #computes p value

ctable <- coef(summary(eq_OLR_04))

ctable <- cbind(ctable, "p value" = p )

ctable
stargazer((ctable), type="text", style="default")

```




##OLR Equation 5
- parameters okay and so/so
- porportion
- collinearity with help with p-value to select ( density, DepEncNatural, drawback, banana, aterro, entulho)





```{r, fig.height=10, fig.width=7}
par(mfrow=c(5,3))
plot.xmean.ordinaly (risk ~  building+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  + DepTaludeAterro+ DepTaludeCorte+ lixo +
                  crack + belly_wall + scars  + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank
          ,data=train.data, cr=TRUE , subn=FALSE , cex.points =0.65)
```

```{r}
f5 <- lrm(risk~building+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  + DepTaludeAterro+ DepTaludeCorte+ lixo +
                  crack + belly_wall + scars  + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank
                  , data= train.data, x=TRUE , y=TRUE)
# x=TRUE, y=TRUE used by resid() below 
#print (f4 , latex =TRUE , coefs =5)
stargazer(anova(f5), type="text", style="default")


eq_OLR_05 <- polr(risk~building+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  + DepTaludeAterro+ DepTaludeCorte+ lixo +
                  crack + belly_wall + scars  + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank
                  , data= train.data
           ,  method = "logistic", Hess = TRUE)
p<- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE*2) #computes p value

ctable <- coef(summary(eq_OLR_05))

ctable <- cbind(ctable, "p value" = p )

ctable
stargazer((ctable), type="text", style="default")

```

## Residual for Equation 1

```{r, fig.height=10, fig.width=7}
par(mfrow=c(4,4))
resid (f1 , 'score.binary',  pl=TRUE) ## Figure 14.3
```

## Residual for Equation 2

```{r, fig.height=10, fig.width=7}
par(mfrow=c(4,4))
resid (f2 , 'score.binary',  pl=TRUE) ## Figure 14.3
```


## Residual for Equation 3

```{r, fig.height=10, fig.width=8}
par(mfrow=c(4,4))
resid (f1 , 'score.binary',  pl=TRUE) ## Figure 14.3
```



## Residual for Equation 4

```{r, fig.height=10, fig.width=7}
par(mfrow=c(5,4))
resid (f4 , 'score.binary',  pl=TRUE) ## Figure 14.3
```

## Residual for Equation 5


```{r, fig.height=10, fig.width=7}
par(mfrow=c(4,4))
resid (f5 , 'score.binary',  pl=TRUE) ## Figure 14.3
```





```{r, fig.height=10, fig.width=7}
par(mfrow=c(4,4))
resid (f5 , 'score.binary',  pl=TRUE) ## Figure 14.3
```

## Plotting parameters level of risk 


# Creating functio with four level 

Equation 1
```{r,  fig.width=7, fig.height=15}
sf <- function (y) {
        c('y>=1' = qlogis(mean(y>=1)),
          'y>=2' = qlogis(mean(y>=2)),
           'y>=3' = qlogis(mean(y>=3)),
            'y>=4' = qlogis(mean(y>=4)))
}

s<-with(train.data, summary(as.numeric(risk)~building+ density+EN+
                  TC_mature_Soil + TC_saprolito + TC_geol_desfav + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation
, fun=sf))
s

plot(s, which=1:4, pch=1:4, xlab='logit', main=' ', xlim=c(-5,5))

```



Equation 2
```{r,  fig.width=7, fig.height=15}
sf <- function (y) {
        c('y>=1' = qlogis(mean(y>=1)),
          'y>=2' = qlogis(mean(y>=2)),
           'y>=3' = qlogis(mean(y>=3)),
            'y>=4' = qlogis(mean(y>=4)))
}

s<-with(train.data, summary(as.numeric(risk)~building+ density+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  DepEncNatural+ DepTaludeAterro+ DepTaludeCorte+ aterro + lixo+ entulho+
                  crack + belly_wall + scars + drawback + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank+ banana
, fun=sf))

s

plot(s, which=1:4, pch=1:4, xlab='logit', main=' ', xlim=c(-5,5))

```


Equation 3
```{r,  fig.width=7, fig.height=15}
sf <- function (y) {
        c('y>=1' = qlogis(mean(y>=1)),
          'y>=2' = qlogis(mean(y>=2)),
           'y>=3' = qlogis(mean(y>=3)),
            'y>=4' = qlogis(mean(y>=4)))
}

s<-with(train.data, summary(as.numeric(risk)~building + EN + TC_mature_Soil 
 + crack + belly_wall + tilted + lixo + 
     scars + drawback  + conc_rainfall_water + wastewater + 
    + tree + ground_veg + angle, fun=sf))

s

plot(s, which=1:4, pch=1:4, xlab='logit', main=' ', xlim=c(-5,5))

```


Equation 4
```{r,  fig.width=7, fig.height=15}
sf <- function (y) {
        c('y>=1' = qlogis(mean(y>=1)),
          'y>=2' = qlogis(mean(y>=2)),
           'y>=3' = qlogis(mean(y>=3)),
            'y>=4' = qlogis(mean(y>=4)))
}

s<-with(train.data, summary(as.numeric(risk)~building+EN+
                   + Taterro +
                  + DepTaludeCorte + lixo+
                  + belly_wall + scars + conc_rainfall_water + wastewater
                  + ground_veg + deforestation +
                  angle , fun=sf))

s

plot(s, which=1:4, pch=1:4, xlab='logit', main=' ', xlim=c(-5,5))

```


Equation 5
```{r,  fig.width=7, fig.height=15}
sf <- function (y) {
        c('y>=1' = qlogis(mean(y>=1)),
          'y>=2' = qlogis(mean(y>=2)),
           'y>=3' = qlogis(mean(y>=3)),
            'y>=4' = qlogis(mean(y>=4)))
}

s<-with(train.data, summary(as.numeric(risk)~building+EN+
                  TC_mature_Soil + TC_saprolito + Taterro +
                  + DepTaludeAterro+ DepTaludeCorte+ lixo +
                  crack + belly_wall + scars  + tilted + conc_rainfall_water + wastewater+
                  leak + tree + ground_veg + deforestation +
                  angle + septic_tank , fun=sf))

s

plot(s, which=1:4, pch=1:4, xlab='logit', main=' ', xlim=c(-5,5))

```


Equation 1
- behaviour of each level of risk 


```{r,  fig.width=10, fig.height=15}
par(mfrow=c(7,4))
resid(f1, 'partial',  pl=TRUE, label.curves=TRUE) # Figure 14.4
```


Equation 2
- behaviour of each level of risk 
```{r,  fig.width=10, fig.height=15}
par(mfrow=c(7,4))
resid(f2, 'partial',  pl=TRUE, label.curves=TRUE) # Figure 14.4
```


Equation 3
- behaviour of each level of risk 
```{r,  fig.width=10, fig.height=15}
par(mfrow=c(4,4))
resid(f3, 'partial',  pl=TRUE, label.curves=TRUE) # Figure 14.4
```




Equation 4
- behaviour of each level of risk 
```{r,  fig.width=10, fig.height=15}
par(mfrow=c(5,4))
resid(f4, 'partial',  pl=TRUE, label.curves=TRUE) # Figure 14.4
```


Equation 5
- behaviour of each level of risk 
```{r,  fig.width=10, fig.height=12}
par(mfrow=c(5,4))
resid(f5, 'partial',  pl=TRUE, label.curves=TRUE) # Figure 14.4
```


## Predicion (book):

```{r}
# 5. Prediction
pred_1 <- predict(eq_OLR_01, train.data)
pred_1A <- predict(f1, train.data)


# 6. Confusion Matrix & Error for Training data
(tab <- table(pred_1, train.data$risk))
training1 <- 1-sum(diag(tab))/sum(tab)

(tabA <- table(pred_1A, train.data$risk))
training1A <- 1-sum(diag(tabA))/sum(tabA)

# 7. Confusion Matrix & Error for Test data
pred1_1 <- predict(eq_OLR_01, test.data)
pred1_1A <- predict(f1, test.data)


(tab1 <- table(pred1_1, test.data$risk))
test1 <- 1-sum(diag(tab1))/sum(tab1)

(tab1A <- table(pred1_1A, test.data$risk))
test1A <- 1-sum(diag(tab1A))/sum(tab1A)


test1 # misclassification rate
tet1A
#Accuracy


```
## Predicion on test data Eq 1: http://r-statistics.co/Ordinal-Logistic-Regression-With-R.html

```{r}
predictedLevel1 <- predict(eq_OLR_01, test.data) # predict the levels directly

predictedScores1 <- predict(eq_OLR_01, test.data, type="p") 
 # predict the probabilites

## Confusion matrix and misclassification error
table(test.data$risk, predictedLevel1)

p1 <- mean(as.character(test.data$risk) != as.character(predictedLevel1)) #misclassification error
p1 
```

## Predicion on test data Eq 1: http://r-statistics.co/Ordinal-Logistic-Regression-With-R.html

```{r}
predictedLevel2 <- predict(eq_OLR_02, test.data) # predict the levels directly

predictedScores2 <- predict(eq_OLR_02, test.data, type="p") 
 # predict the probabilites

## Confusion matrix and misclassification error
table(test.data$risk, predictedLevel2)

p2 <- mean(as.character(test.data$risk) != as.character(predictedLevel2))
p2
```
## Predicion on test data Eq 3: http://r-statistics.co/Ordinal-Logistic-Regression-With-R.html

```{r}
predictedLevel3 <- predict(eq_OLR_03, test.data) # predict the levels directly

predictedScores1 <- predict(eq_OLR_03, test.data, type="p") 
 # predict the probabilites

## Confusion matrix and misclassification error
table(test.data$risk, predictedLevel3)

p3 <- mean(as.character(test.data$risk) != as.character(predictedLevel3))
p3
```
## Predicion on test data Eq 1: http://r-statistics.co/Ordinal-Logistic-Regression-With-R.html

```{r}
predictedLevel4 <- predict(eq_OLR_04, test.data) # predict the levels directly

predictedScores1 <- predict(eq_OLR_04, test.data, type="p") 
 # predict the probabilites

## Confusion matrix and misclassification error
table(test.data$risk, predictedLevel4)

p4 <- mean(as.character(test.data$risk) != as.character(predictedLevel4))
p4
```


## Predicion on test data Eq 5: http://r-statistics.co/Ordinal-Logistic-Regression-With-R.html

```{r}
predictedLevel5 <- predict(eq_OLR_05, test.data) # predict the levels directly

predictedScores5 <- predict(eq_OLR_05, test.data, type="p") 
 # predict the probabilites

## Confusion matrix and misclassification error
table(test.data$risk, predictedLevel5)

p5 <- mean(as.character(test.data$risk) != as.character(predictedLevel5))
p5
```





```{r}
# 5. Prediction
pred_2 <- predict(eq_OLR_02, train.data)

# 6. Confusion Matrix & Error for Training data
(tab <- table(pred_2, train.data$risk))
training2 <- 1-sum(diag(tab))/sum(tab)

# 7. Confusion Matrix & Error for Test data
pred1_2 <- predict(eq_OLR_02, test.data)

(tab1 <- table(pred1_2, test.data$risk))
test2<- 1-sum(diag(tab1))/sum(tab1)
test2

```


```{r}
# 5. Prediction
pred_3 <- predict(eq_OLR_03, train.data)

# 6. Confusion Matrix & Error for Training data
(tab <- table(pred_3, train.data$risk))
training3 <- 1-sum(diag(tab))/sum(tab)

# 7. Confusion Matrix & Error for Test data
pred1_3 <- predict(eq_OLR_03, test.data)

(tab1 <- table(pred1_3, test.data$risk))
test3 <- 1-sum(diag(tab1))/sum(tab1)


test3
```


```{r}
# 5. Prediction
pred_4 <- predict(eq_OLR_04, train.data)

# 6. Confusion Matrix & Error for Training data
(tab <- table(pred_4, train.data$risk))
training4 <-1-sum(diag(tab))/sum(tab)

# 7. Confusion Matrix & Error for Test data
pred1_4 <- predict(eq_OLR_04, test.data)

(tab1 <- table(pred1_4, test.data$risk))
test4 <-1-sum(diag(tab1))/sum(tab1)

test4
```


```{r}
# 5. Prediction
pred_5 <- predict(eq_OLR_05, train.data)

# 6. Confusion Matrix & Error for Training data
(tab <- table(pred_5, train.data$risk))
training5 <- 1-sum(diag(tab))/sum(tab)

# 7. Confusion Matrix & Error for Test data
pred1_5 <- predict(eq_OLR_05, test.data)

(tab1 <- table(pred1_5, test.data$risk))
test5 <- 1-sum(diag(tab1))/sum(tab1)
test5
```

## Comparing prediction training and test for models
```{r}

df <- data.frame(
        Model= c(1:5),
        Misclassification=c(test1, test2, test3, test4, test5)
        
)

df



```



f3 <- lrm(risk ~ building + EN + TC_mature_Soil 
 + crack + belly_wall + tilted + lixo + 
     scars + drawback  + conc_rainfall_water + wastewater + 
    + tree + ground_veg + angle  
          , data=train.data, x=TRUE , y=TRUE)
# x=TRUE, y=TRUE used by resid() below 

eq_OLR_03 <- polr(risk ~building + EN + TC_mature_Soil 
 + crack + belly_wall + tilted + lixo + 
     scars + drawback  + conc_rainfall_water + wastewater + 
    + tree + ground_veg + angle,
 data= train.data
           ,  method = "logistic", Hess = TRUE)

## Predict dataset 

 Equation 3


```{r}
df<- validation2

equation <-  (0.554*building + 0.255*ENT + 0.744*TC_mature_Soil
 + 1.545*crack + 1.798*belly_wall + 0.004*tilted + 0.439*lixo + 
     4.686*scars + 0.895*drawbackTRUE  + 2.247*conc_rainfall_waterTRUE + 1.105*wastewater + 
    + -0.416*tree + 0.851*ground_veg + -4.559*angleB -2.077*angleC-0.501*angleD)


```


```{r}
validation2 <- validation2 %>%
        select(setor, building, EN, TC_mature_Soil, crack, belly_wall, tilted, lixo, 
     scars,  drawback, conc_rainfall_water, wastewater, tree, ground_veg, angle)
```


```{r}
prediction <- predict(eq_OLR_03, newdata = test.data)
prediction

```

