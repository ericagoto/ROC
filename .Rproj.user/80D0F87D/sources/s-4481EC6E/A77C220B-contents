---
title: "Diagnostic - one model"
author: "Erica Goto"
date: "2/10/2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

### Library & Dataset
```{r, warning=FALSE,  include=FALSE}
library(MASS)
library(tidyverse)
library(readxl)
library(car)
library(stats)
library(nnet)
library(glmnet)
library(boot)
library(nlstools)
library (ggplot2)
#library(sf)
#library(rstanarm)
library(caret)
library(nnet)
library(sure)
#library(Hmisc)
library(stargazer)
library(rms)
library(readxl)
library(dplyr)

OLR <- read_excel("all.xlsx")

```



Using OLR
```{r, warning=FALSE,  include=FALSE}
OLR <- OLR  %>%  filter(density != "d4") 

OLR$angle <- as.factor(OLR$angle) #it is not factor, categories are independent in order of importance. The same with density
OLR$building <-factor(OLR$building, levels=c("B", "W", "M"), ordered=TRUE) 

#if (OLR$building  == "B") {0}
#if(OLR$building  == "W") {1}
#if(OLR$building  == "M") {2}
#OLR$building <-as.integer(OLR$building)
OLR$EN <- as.logical(OLR$EN)
OLR$density <- as.factor(OLR$density)
OLR$TC <- as.logical(OLR$TC)
OLR$TC_mature_Soil <- as.logical(OLR$TC_mature_Soil)
OLR$TC_saprolito <- as.logical(OLR$TC_saprolito)
OLR$TC_weath_rock <- as.logical(OLR$TC_weath_rock)
OLR$TC_rock <- as.logical(OLR$TC_rock)
OLR$TC_geol_desfav <- as.logical(OLR$TC_geol_desfav)
OLR$Taterro <- as.logical(OLR$Taterro)
OLR$DepEncosta <- as.logical(OLR$DepEncosta)
OLR$DepEncNatural <- as.logical(OLR$DepEncNatural)
OLR$DepTaludeCorte <- as.logical(OLR$DepTaludeCorte)
OLR$DepTaludeAterro <- as.logical(OLR$DepTaludeAterro)
OLR$landfill <- as.logical(OLR$landfill)
OLR$garbage <- as.logical(OLR$garbage)
OLR$construction_deposit <- as.logical(OLR$construction_deposit)
OLR$crack <- as.logical(OLR$crack)
OLR$leaning_wall <- as.logical(OLR$leaning_wall)
OLR$scars <- as.logical(OLR$scars)
OLR$conc_rainfall_water <- as.logical(OLR$conc_rainfall_water)
OLR$downward_floor <- as.logical(OLR$downward_floor)
OLR$tilted <- as.logical(OLR$tilted)
OLR$fracture <- as.logical(OLR$fracture)
OLR$wastewater <- as.logical(OLR$wastewater)
OLR$leak <- as.logical(OLR$leak)
OLR$septic_tank <- as.logical(OLR$septic_tank)
OLR$drainage <- factor(OLR$drainage, levels=c("Y", "P", "N"), ordered=TRUE)
#if(OLR$drainage  == "Y"){0}
#if(OLR$drainage  == "P"){1}
#if(OLR$drainage  == "N"){2}
#OLR$drainage <- as.integer(OLR$drainage)

OLR$tree <- as.logical(OLR$tree)
OLR$ground_veg <- as.logical(OLR$ground_veg)
OLR$deforestation <- as.logical(OLR$deforestation)
OLR$banana <- as.logical(OLR$banana)
OLR$risk <- factor(OLR$risk, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)



```



##Inspect Dataset Using Training and Validation

```{r, warning=FALSE,  include=FALSE}
#set.seed(1234)
training.samples <- OLR$risk %>%
        createDataPartition(p=0.7, list=FALSE)
train.data  <- OLR[training.samples, ]
test.data <- OLR[-training.samples, ]
```


## Equation 3
- parameters okay and so/so
- porportion
- p-value based equation 2  > 0.12(banana, septic_tank, deforestation, leak,  entulho, aterro, DepTaludeCorte, DepTaludeAterro, Taterro, Tc_saprolito, density)
- TC is not okay

```{r}


eq_OLR_03 <- polr(risk ~ building + EN + DepTaludeAterro+  DepTaludeCorte+ crack+ leaning_wall+ scars+ downward_floor+ tilted+ground_veg + conc_rainfall_water+tree+ wastewater + TC,
 data= train.data
           ,  method = "logistic", Hess = TRUE)
ctable <- coef(summary(eq_OLR_03))


p<- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE*2) #computes p value
ctable <- cbind(ctable, "p value" = p )

ctable


stargazer((ctable), type="text", style="default")
#print (f3 , latex =TRUE , coefs =5)


```



```{r}
prediction <- predict(eq_OLR_03, newdata = test.data)
prediction <- data.frame(prediction)


```



################################ AHP ########################


Changing AHP Training to compute Risk Value
```{r}


#change values InstabSum, AguaTotal, VegTogal

eq_angle = function (df){
                
                
                ## ANGLE 
             angle <-  ifelse (df$angle  == "A", 0.6336, ifelse (df$angle  == "B", 0.999, 
                ifelse (df$angle  == "C",  1.798, 
                ifelse (df$angle  == "D", 3.015, 
                ifelse (df$angle  == "E", 5.685, 
                ifelse (df$angle   =="F", 5.848, 0))))))
             
             TC <- ifelse(df$TC == TRUE, 5.848, angle)
             
             return(TC)
        
}
angle <- eq_angle(train.data)


builidng_material = function (df){

        
        ### Building material
        ifelse (df$building == "B", 0.775, 
                ifelse (df$building == "W", 3.152, 
                        ifelse (df$building == "M", 3.595,0)))
        
}
        
 building_material <- builidng_material(train.data)       
        
        
        
 building_postion <- function (df){  
        ### Building postion
        ifelse (df$building_position == "near_base_slope", 2.145,   
        ifelse (df$building_position == "near_top_slope",  1.504,  
        ifelse (df$building_position == "far_base_slope",  0.349, 
        ifelse (df$building_position == "far_top_slope", 0.286, 
        ifelse (df$building_position == "middle_slope", 2.063))))) 

        
 }
                 #### density
 
 
  density <- function (df)
 {
        ifelse (df$density == "d1", 0.952,  
        ifelse (df$density == "d2", 2.550, 
        ifelse (df$density == "d3", 2.961, 
        ifelse (df$density == "d4", 2.271, 0))))
        
 }
    
 density <- density (train.data)
 
        ### soil (Y = soil favorable to unstable slope, NO = not observed, N = soil fav to slope stability)
 
 soil <- function (df)
 {
         
        ifelse (soil == "Y", 4.720,  
        ifelse (soil == "NO",  2.360, 
        ifelse (soil == "N", 0, 0)))       
 }
        #### geology (Y = geol favorable to unstable slope, NO = not observed, N = geol fav to slope stability)
 
# soil <- soil(validation)
 
 geology <- function (df) {
      geology <-    ifelse (df$TC_geol_desfav == TRUE, 4.651, 0) 
return(geology)
 }
 
geology <- geology(train.data)

        ### naturage coverage
 
 
nat_coverage <- function (df){
 
        ifelse (df$nat_coverage == "Y",  1.881,  
        ifelse (df$nat_coverage == "NO", 0.941, 
        ifelse (df$nat_coverage == "N",0, 0)))   
        
 }
        
 
 # nat_coverage <-  nat_coverage(df)
 
 ## vegetation (ADD These)
  
 vegetation <- function (df){
        
      df$tree <-  ifelse (df$tree == 1, 0.370, 0)  
        df$ground_veg <- ifelse (df$ground_veg == 1, 1.137, 0)  
       df$deforestation <-  ifelse (df$deforestation == 1, 0.405, 0)  
       df$banana <-  ifelse (df$banana == 1, 1.253, 0)  

        vegetation <- df$tree + df$ground_veg + df$banana +  df$deforestation
        return(vegetation)
}
        
  vegetation <-   vegetation(train.data)   
     
     
water <- function (df){        
        
        
        
        #### water (ADD These)
     df$wastewater <-    ifelse ( df$wastewater  == 1, 0.961, 0)  
       df$conc_rainfall_water <- ifelse (df$conc_rainfall_water == 1, 0.977, 0)  
        df$leak <- ifelse (df$leak == 1, 1.949, 0)  
       df$septic_tank <-  ifelse (df$septic_tank == 1, 0.839, 0)  
       df$drainage <-  ifelse (df$drainage == "N", 0.624, 
                         ifelse (df$drainage  == "P", 0.535, 
                        ifelse (df$drainage == "Y", 0.099, 0)))  
        
        water <-  df$wastewater +  df$conc_rainfall_water +   df$leak + df$septic_tank + df$drainage
        return(water)
}
        
water <- water(train.data)


instability <- function(df) {

        #### instability (ADD these)
     leaning_wall <-    ifelse (df$leaning_wall == 1, 9.533, 0)  
      tilted <-  ifelse (df$tilted == 1, 9.533, 0)  
       downward<-  ifelse (df$downward_floor == 1, 16.877, 0)  
       scars <-  ifelse ( df$scars == 1, 12.640, 0) 
        crack <-  ifelse (df$crack == 1, 11.016, 0) 
        
        Instab1  <- tilted + leaning_wall
        Instab2 <- downward + crack
       
# Considering collinearity
Instab1 <-ifelse (Instab1 >= 9.533, 9.533, Instab1)
 
Instab2 <-ifelse (Instab2 > 11.016, 13.95, Instab2)
        
        
        instability  <- (Instab1 + Instab2 + scars)*(59.6/39.05)
         
}

instability <- instability(train.data)  
        
   ##### garbage


garbage <- function (df) {
     
        df$lixo <- ifelse (df$garbage  == 1, 3.878, 0) 
        df$landfill   <- ifelse (df$landfill == 1, 3.878, 0)  
        df$construction_deposit <- ifelse (df$construction_deposit == 1, 3.878, 0)  
        
        garbage <-  df$garbage  +  df$landfill  + df$construction_deposit
        
       garbage <-  ifelse(garbage >= 3.878, 3.878, 0)
        
        return (garbage)
        
}        

garbage <- garbage(train.data)
        
# 
      
Risk_Value_Training <- angle +  building_material  + vegetation + density + water + instability+ garbage + geology + 2.063+2.145+1.504 

Risk_Training <- train.data %>%
  select(setor, risk)

Risk_Training <- cbind(Risk_Training, Risk_Value_Training)

colnames(Risk_Training) <- c("Sector", "RiskMapped", "RiskAHP")



```

Ploting AHP1 to look the distribution
```{r AHP1_plot}
Hist <- hist(Risk_Training$RiskAHP, breaks = 60, xlim = c(0,100), main ="Histogram of risk values", xlab = "risk value", ylab="frequency")
QQPlot <- qqnorm(Risk_Training$RiskAHP, main="QQPlot risk values")



#Hist <- hist(AHP1$LogRisk, breaks = 100)

par(mfrow=c(1,2))





hist_ggplot <- ggplot(Risk_Training, aes(x=RiskAHP)) +
                        geom_histogram(aes(y=..density..), binwidth=0.8, color="dark green", fill="white")+
 geom_density(alpha=.2, fill="#FF6666", adjust=0.7) + 
    labs(x="risk value", y = "density") + 
    theme(plot.title = element_text(hjust = 1)) ##center


  
hist_ggplot + scale_x_continuous(limits = c(0, 100), breaks = c(0,5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80,85,90,95))

```


```{r}




#change values InstabSum, AguaTotal, VegTogal

eq_angle = function (df){
                
                
                ## ANGLE 
             angle <-  ifelse (df$angle  == "A", 0.6336, ifelse (df$angle  == "B", 0.999, 
                ifelse (df$angle  == "C",  1.798, 
                ifelse (df$angle  == "D", 3.015, 
                ifelse (df$angle  == "E", 5.685, 
                ifelse (df$angle   =="F", 5.848, 0))))))
             
             TC <- ifelse(df$TC == TRUE, 5.848, angle)
             
             return(TC)
        
}
angle <- eq_angle(test.data)


builidng_material = function (df){

        
        ### Building material
        ifelse (df$building == "B", 0.775, 
                ifelse (df$building == "W", 3.152, 
                        ifelse (df$building == "M", 3.595,0)))
        
}
        
 building_material <- builidng_material(test.data)       
        
        
        
 building_postion <- function (df){  
        ### Building postion
        ifelse (df$building_position == "near_base_slope", 2.145,   
        ifelse (df$building_position == "near_top_slope",  1.504,  
        ifelse (df$building_position == "far_base_slope",  0.349, 
        ifelse (df$building_position == "far_top_slope", 0.286, 
        ifelse (df$building_position == "middle_slope", 2.063))))) 

        
 }
                 #### density
 
 
  density <- function (df)
 {
        ifelse (df$density == "d1", 0.952,  
        ifelse (df$density == "d2", 2.550, 
        ifelse (df$density == "d3", 2.961, 
        ifelse (df$density == "d4", 2.271, 0))))
        
 }
    
 density <- density (test.data)
 
        ### soil (Y = soil favorable to unstable slope, NO = not observed, N = soil fav to slope stability)
 
 soil <- function (df)
 {
         
        ifelse (soil == "Y", 4.720,  
        ifelse (soil == "NO",  2.360, 
        ifelse (soil == "N", 0, 0)))       
 }
        #### geology (Y = geol favorable to unstable slope, NO = not observed, N = geol fav to slope stability)
 
# soil <- soil(validation)
 
 geology <- function (df) {
      geology <-    ifelse (df$TC_geol_desfav == TRUE, 4.651, 0) 
return(geology)
 }
 
geology <- geology(test.data)

        ### naturage coverage
 
 
nat_coverage <- function (df){
 
        ifelse (df$nat_coverage == "Y",  1.881,  
        ifelse (df$nat_coverage == "NO", 0.941, 
        ifelse (df$nat_coverage == "N",0, 0)))   
        
 }
        
 
 # nat_coverage <-  nat_coverage(df)
 
 ## vegetation (ADD These)
  
 vegetation <- function (df){
        
      df$tree <-  ifelse (df$tree == 1, 0.370, 0)  
        df$ground_veg <- ifelse (df$ground_veg == 1, 1.137, 0)  
       df$deforestation <-  ifelse (df$deforestation == 1, 0.405, 0)  
       df$banana <-  ifelse (df$banana == 1, 1.253, 0)  

        vegetation <- df$tree + df$ground_veg + df$banana +  df$deforestation
        return(vegetation)
}
        
  vegetation <-   vegetation(test.data)   
     
     
water <- function (df){        
        
        
        
        #### water (ADD These)
     df$wastewater <-    ifelse ( df$wastewater  == 1, 0.961, 0)  
       df$conc_rainfall_water <- ifelse (df$conc_rainfall_water == 1, 0.977, 0)  
        df$leak <- ifelse (df$leak == 1, 1.949, 0)  
       df$septic_tank <-  ifelse (df$septic_tank == 1, 0.839, 0)  
       df$drainage <-  ifelse (df$drainage == "N", 0.624, 
                         ifelse (df$drainage  == "P", 0.535, 
                        ifelse (df$drainage == "Y", 0.099, 0)))  
        
        water <-  df$wastewater +  df$conc_rainfall_water +   df$leak + df$septic_tank + df$drainage
        return(water)
}
        
water <- water(test.data)


instability <- function(df) {

        #### instability (ADD these)
     leaning_wall <-    ifelse (df$leaning_wall == 1, 9.533, 0)  
      tilted <-  ifelse (df$tilted == 1, 9.533, 0)  
       downward<-  ifelse (df$downward_floor == 1, 16.877, 0)  
       scars <-  ifelse ( df$scars == 1, 12.640, 0) 
        crack <-  ifelse (df$crack == 1, 11.016, 0) 
        
        Instab1  <- tilted + leaning_wall
        Instab2 <- downward + crack
       
# Considering collinearity
Instab1 <-ifelse (Instab1 >= 9.533, 9.533, Instab1)
 
Instab2 <-ifelse (Instab2 > 11.016, 13.95, Instab2)
        
        
        instability  <- (Instab1 + Instab2 + scars)*(59.6/39.05)
         
}

instability <- instability(test.data)  
        
   ##### garbage


garbage <- function (df) {
     
        df$lixo <- ifelse (df$garbage  == 1, 3.878, 0) 
        df$landfill   <- ifelse (df$landfill == 1, 3.878, 0)  
        df$construction_deposit <- ifelse (df$construction_deposit == 1, 3.878, 0)  
        
        garbage <-  df$garbage  +  df$landfill  + df$construction_deposit
        
       garbage <-  ifelse(garbage >= 3.878, 3.878, 0)
        
        return (garbage)
        
}        

garbage <- garbage(test.data)
        
# 
      
Risk_Value_Test <- angle +  building_material  + vegetation + density + water + instability+ garbage + geology + 2.063+2.145+1.504 

Risk_Test <- test.data %>%
  select(setor, risk)

Risk_Training <- cbind(Risk_Test, Risk_Value_Test)

colnames(Risk_Training) <- c("Sector", "RiskMapped", "RiskAHP_Test")



###Thresholds

  RiskValue <-   ifelse (Risk_Value_Test < 31,  "R1",  
        ifelse (Risk_Value_Test >=31 & Risk_Value_Test <49,  "R2", 
      ifelse (Risk_Value_Test>=49 & Risk_Value_Test<69, "R3", 
    ifelse (Risk_Value_Test >=69, "R4", 0))))  
   
        RiskValue


        

```


Run equation
```{r}







new_data <- data.frame (
       
       test.data$setor, 
       RiskValue, 
       test.data$risk
        
)

colnames(new_data) <-c("Sector", "Risk_AHP","Risk_Mapped")

```

# With OLR

```{r}
new_data <- cbind (new_data, prediction)
colnames(new_data) <-c("Sector", "Risk_AHP","Risk_Mapped", "Risk_OLR")

new_data$Risk_AHP <- factor(new_data$Risk_AHP, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)


new_data$Risk_Mapped <- factor(new_data$Risk_Mapped, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)

new_data$Risk_OLR  <- factor(new_data$Risk_OLR , levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)



new_data

```

## confusion matrix and misclassification error
```{r}
###AHP VS Mapped
(tab <- table(new_data$Risk_AHP, new_data$Risk_Mapped))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab))/sum(tab) # Misclassification Error
AHP_Mapped


### OLR VS Mapped
(tab1 <- table(new_data$Risk_Mapped, new_data$Risk_OLR))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab1))/sum(tab1) # Misclassification Error
AHP_Mapped


###AHPH VS OLR
(tab2 <- table(new_data$Risk_AHP, new_data$Risk_OLR))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab2))/sum(tab2) # Misclassification Error
AHP_Mapped



```
## Misclassification Error
```{r}

table(new_data$Risk_AHP, new_data$Risk_Mapped)  # confusion matrix
mean(as.character(new_data$Risk_AHP) != as.character(new_data$Risk_Mapped)) # Misclassification Error
```



