water <-  df$wastewater +  df$conc_rainfall_water +   df$leak + df$septic_tank + df$drainage
return(water)
}
water <- water(train.data)
instability <- function(df) {
#### instability (ADD these)
leaning_wall <-    ifelse (df$leaning_wall == 1, 9.533, 0)
tilted <-  ifelse (df$tilted == 1, 9.533, 0)
downward<-  ifelse (df$downward_floor == 1, 16.877, 0)
scars <-  ifelse ( df$scars == 1, 12.640, 0)
crack <-  ifelse (df$crack == 1, 11.016, 0)
Instab1  <- tilted + leaning_wall
Instab2 <- downward + crack
# Considering collinearity
Instab1 <-ifelse (Instab1 >= 9.533, 9.533, Instab1)
Instab2 <-ifelse (Instab2 >= 16.877, 16.877, Instab2)
instability  <- (Instab1 + Instab2 + scars)*(59.6/39.05)
}
instability <- instability(train.data)
##### garbage
garbage <- function (df) {
df$lixo <- ifelse (df$garbage  == 1, 3.878, 0)
df$landfill   <- ifelse (df$landfill == 1, 3.878, 0)
df$construction_deposit <- ifelse (df$construction_deposit == 1, 3.878, 0)
garbage <-  df$garbage  +  df$landfill  + df$construction_deposit
garbage <-  ifelse(garbage >= 3.878, 3.878, 0)
return (garbage)
}
garbage <- garbage(train.data)
#
Risk_Value_Training <- angle +  building_material  + vegetation + density + water + instability+ garbage + geology + 2.063+2.145+1.504
Risk_Training <- train.data %>%
select(setor, risk)
Risk_Training <- cbind(Risk_Training, Risk_Value_Training)
colnames(Risk_Training) <- c("Sector", "RiskMapped", "RiskAHP")
Hist <- hist(Risk_Training$RiskAHP, breaks = 60, xlim = c(0,100), main ="Histogram of risk values", xlab = "risk value", ylab="frequency")
QQPlot <- qqnorm(Risk_Training$RiskAHP, main="QQPlot risk values")
#Hist <- hist(AHP1$LogRisk, breaks = 100)
par(mfrow=c(1,2))
hist_ggplot <- ggplot(Risk_Training, aes(x=RiskAHP)) +
geom_histogram(aes(y=..density..), binwidth=0.8, color="dark green", fill="white")+
geom_density(alpha=.2, fill="#FF6666", adjust=0.7) +
labs(x="risk value", y = "density") +
theme(plot.title = element_text(hjust = 1)) ##center
hist_ggplot + scale_x_continuous(limits = c(0, 100), breaks = c(0,5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80,85,90,95))
#change values InstabSum, AguaTotal, VegTogal
eq_angle = function (df){
## ANGLE
angle <-  ifelse (df$angle  == "A", 0.6336, ifelse (df$angle  == "B", 0.999,
ifelse (df$angle  == "C",  1.798,
ifelse (df$angle  == "D", 3.015,
ifelse (df$angle  == "E", 5.685,
ifelse (df$angle   =="F", 5.848, 0))))))
TC <- ifelse(df$TC == TRUE, 5.848, angle)
return(TC)
}
angle <- eq_angle(train.data)
builidng_material = function (df){
### Building material
ifelse (df$building == "B", 0.775,
ifelse (df$building == "W", 3.152,
ifelse (df$building == "M", 3.595,0)))
}
building_material <- builidng_material(train.data)
building_postion <- function (df){
### Building postion
ifelse (df$building_position == "near_base_slope", 2.145,
ifelse (df$building_position == "near_top_slope",  1.504,
ifelse (df$building_position == "far_base_slope",  0.349,
ifelse (df$building_position == "far_top_slope", 0.286,
ifelse (df$building_position == "middle_slope", 2.063)))))
}
#### density
density <- function (df)
{
ifelse (df$density == "d1", 0.952,
ifelse (df$density == "d2", 2.550,
ifelse (df$density == "d3", 2.961,
ifelse (df$density == "d4", 2.271, 0))))
}
density <- density (train.data)
### soil (Y = soil favorable to unstable slope, NO = not observed, N = soil fav to slope stability)
soil <- function (df)
{
ifelse (soil == "Y", 4.720,
ifelse (soil == "NO",  2.360,
ifelse (soil == "N", 0, 0)))
}
#### geology (Y = geol favorable to unstable slope, NO = not observed, N = geol fav to slope stability)
# soil <- soil(validation)
geology <- function (df) {
geology <-    ifelse (df$TC_geol_desfav == TRUE, 4.651, 0)
return(geology)
}
geology <- geology(train.data)
### naturage coverage
nat_coverage <- function (df){
ifelse (df$nat_coverage == "Y",  1.881,
ifelse (df$nat_coverage == "NO", 0.941,
ifelse (df$nat_coverage == "N",0, 0)))
}
# nat_coverage <-  nat_coverage(df)
## vegetation (ADD These)
vegetation <- function (df){
df$tree <-  ifelse (df$tree == 1, 0.370, 0)
df$ground_veg <- ifelse (df$ground_veg == 1, 1.137, 0)
df$deforestation <-  ifelse (df$deforestation == 1, 0.405, 0)
df$banana <-  ifelse (df$banana == 1, 1.253, 0)
vegetation <- df$tree + df$ground_veg + df$banana +  df$deforestation
return(vegetation)
}
vegetation <-   vegetation(train.data)
water <- function (df){
#### water (ADD These)
df$wastewater <-    ifelse ( df$wastewater  == 1, 0.961, 0)
df$conc_rainfall_water <- ifelse (df$conc_rainfall_water == 1, 0.977, 0)
df$leak <- ifelse (df$leak == 1, 1.949, 0)
df$septic_tank <-  ifelse (df$septic_tank == 1, 0.839, 0)
df$drainage <-  ifelse (df$drainage == "N", 0.624,
ifelse (df$drainage  == "P", 0.535,
ifelse (df$drainage == "Y", 0.099, 0)))
water <-  df$wastewater +  df$conc_rainfall_water +   df$leak + df$septic_tank + df$drainage
return(water)
}
water <- water(train.data)
instability <- function(df) {
#### instability (ADD these)
leaning_wall <-    ifelse (df$leaning_wall == 1, 9.533, 0)
tilted <-  ifelse (df$tilted == 1, 9.533, 0)
downward<-  ifelse (df$downward_floor == 1, 16.877, 0)
scars <-  ifelse ( df$scars == 1, 12.640, 0)
crack <-  ifelse (df$crack == 1, 11.016, 0)
Instab1  <- tilted + leaning_wall
Instab2 <- downward + crack
# Considering collinearity
Instab1 <-ifelse (Instab1 >= 9.533, 9.533, Instab1)
Instab2 <-ifelse (Instab2 > 11.016, 13.95, Instab2)
instability  <- (Instab1 + Instab2 + scars)*(59.6/39.05)
}
instability <- instability(train.data)
##### garbage
garbage <- function (df) {
df$lixo <- ifelse (df$garbage  == 1, 3.878, 0)
df$landfill   <- ifelse (df$landfill == 1, 3.878, 0)
df$construction_deposit <- ifelse (df$construction_deposit == 1, 3.878, 0)
garbage <-  df$garbage  +  df$landfill  + df$construction_deposit
garbage <-  ifelse(garbage >= 3.878, 3.878, 0)
return (garbage)
}
garbage <- garbage(train.data)
#
Risk_Value_Training <- angle +  building_material  + vegetation + density + water + instability+ garbage + geology + 2.063+2.145+1.504
Risk_Training <- train.data %>%
select(setor, risk)
Risk_Training <- cbind(Risk_Training, Risk_Value_Training)
colnames(Risk_Training) <- c("Sector", "RiskMapped", "RiskAHP")
Hist <- hist(Risk_Training$RiskAHP, breaks = 60, xlim = c(0,100), main ="Histogram of risk values", xlab = "risk value", ylab="frequency")
QQPlot <- qqnorm(Risk_Training$RiskAHP, main="QQPlot risk values")
#Hist <- hist(AHP1$LogRisk, breaks = 100)
par(mfrow=c(1,2))
hist_ggplot <- ggplot(Risk_Training, aes(x=RiskAHP)) +
geom_histogram(aes(y=..density..), binwidth=0.8, color="dark green", fill="white")+
geom_density(alpha=.2, fill="#FF6666", adjust=0.7) +
labs(x="risk value", y = "density") +
theme(plot.title = element_text(hjust = 1)) ##center
hist_ggplot + scale_x_continuous(limits = c(0, 100), breaks = c(0,5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80,85,90,95))
thresholds 31
#change values InstabSum, AguaTotal, VegTogal
eq_angle = function (df){
## ANGLE
angle <-  ifelse (df$angle  == "A", 0.6336, ifelse (df$angle  == "B", 0.999,
ifelse (df$angle  == "C",  1.798,
ifelse (df$angle  == "D", 3.015,
ifelse (df$angle  == "E", 5.685,
ifelse (df$angle   =="F", 5.848, 0))))))
TC <- ifelse(df$TC == TRUE, 5.848, angle)
return(TC)
}
angle <- eq_angle(test.data)
builidng_material = function (df){
### Building material
ifelse (df$building == "B", 0.775,
ifelse (df$building == "W", 3.152,
ifelse (df$building == "M", 3.595,0)))
}
building_material <- builidng_material(test.data)
building_postion <- function (df){
### Building postion
ifelse (df$building_position == "near_base_slope", 2.145,
ifelse (df$building_position == "near_top_slope",  1.504,
ifelse (df$building_position == "far_base_slope",  0.349,
ifelse (df$building_position == "far_top_slope", 0.286,
ifelse (df$building_position == "middle_slope", 2.063)))))
}
#### density
density <- function (df)
{
ifelse (df$density == "d1", 0.952,
ifelse (df$density == "d2", 2.550,
ifelse (df$density == "d3", 2.961,
ifelse (df$density == "d4", 2.271, 0))))
}
density <- density (test.data)
### soil (Y = soil favorable to unstable slope, NO = not observed, N = soil fav to slope stability)
soil <- function (df)
{
ifelse (soil == "Y", 4.720,
ifelse (soil == "NO",  2.360,
ifelse (soil == "N", 0, 0)))
}
#### geology (Y = geol favorable to unstable slope, NO = not observed, N = geol fav to slope stability)
# soil <- soil(validation)
geology <- function (df) {
geology <-    ifelse (df$TC_geol_desfav == TRUE, 4.651, 0)
return(geology)
}
geology <- geology(test.data)
### naturage coverage
nat_coverage <- function (df){
ifelse (df$nat_coverage == "Y",  1.881,
ifelse (df$nat_coverage == "NO", 0.941,
ifelse (df$nat_coverage == "N",0, 0)))
}
# nat_coverage <-  nat_coverage(df)
## vegetation (ADD These)
vegetation <- function (df){
df$tree <-  ifelse (df$tree == 1, 0.370, 0)
df$ground_veg <- ifelse (df$ground_veg == 1, 1.137, 0)
df$deforestation <-  ifelse (df$deforestation == 1, 0.405, 0)
df$banana <-  ifelse (df$banana == 1, 1.253, 0)
vegetation <- df$tree + df$ground_veg + df$banana +  df$deforestation
return(vegetation)
}
vegetation <-   vegetation(test.data)
water <- function (df){
#### water (ADD These)
df$wastewater <-    ifelse ( df$wastewater  == 1, 0.961, 0)
df$conc_rainfall_water <- ifelse (df$conc_rainfall_water == 1, 0.977, 0)
df$leak <- ifelse (df$leak == 1, 1.949, 0)
df$septic_tank <-  ifelse (df$septic_tank == 1, 0.839, 0)
df$drainage <-  ifelse (df$drainage == "N", 0.624,
ifelse (df$drainage  == "P", 0.535,
ifelse (df$drainage == "Y", 0.099, 0)))
water <-  df$wastewater +  df$conc_rainfall_water +   df$leak + df$septic_tank + df$drainage
return(water)
}
water <- water(test.data)
instability <- function(df) {
#### instability (ADD these)
leaning_wall <-    ifelse (df$leaning_wall == 1, 9.533, 0)
tilted <-  ifelse (df$tilted == 1, 9.533, 0)
downward<-  ifelse (df$downward_floor == 1, 16.877, 0)
scars <-  ifelse ( df$scars == 1, 12.640, 0)
crack <-  ifelse (df$crack == 1, 11.016, 0)
Instab1  <- tilted + leaning_wall
Instab2 <- downward + crack
# Considering collinearity
Instab1 <-ifelse (Instab1 >= 9.533, 9.533, Instab1)
Instab2 <-ifelse (Instab2 > 11.016, 13.95, Instab2)
instability  <- (Instab1 + Instab2 + scars)*(59.6/39.05)
}
instability <- instability(test.data)
##### garbage
garbage <- function (df) {
df$lixo <- ifelse (df$garbage  == 1, 3.878, 0)
df$landfill   <- ifelse (df$landfill == 1, 3.878, 0)
df$construction_deposit <- ifelse (df$construction_deposit == 1, 3.878, 0)
garbage <-  df$garbage  +  df$landfill  + df$construction_deposit
garbage <-  ifelse(garbage >= 3.878, 3.878, 0)
return (garbage)
}
garbage <- garbage(test.data)
#
Risk_Value_Test <- angle +  building_material  + vegetation + density + water + instability+ garbage + geology + 2.063+2.145+1.504
Risk_Test <- test.data %>%
select(setor, risk)
Risk_Training <- cbind(Risk_Test, Risk_Value_Test)
colnames(Risk_Training) <- c("Sector", "RiskMapped", "RiskAHP_Test")
###Thresholds
RiskValue <-   ifelse (Risk_Value < 31,  "R1",
ifelse (Risk_Value >=31 & Risk_Value <49,  "R2",
ifelse (Risk_Value>=49 & Risk_Value<69, "R3",
ifelse (Risk_Value >=69, "R4", 0))))
RiskValue
new_data <- data.frame (
test.data$setor,
RiskValue,
test.data$risk
)
colnames(new_data) <-c("Sector", "Risk_AHP","Risk_Mapped")
new_data <- cbind (new_data, prediction)
colnames(new_data) <-c("Sector", "Risk_AHP","Risk_Mapped", "Risk_OLR")
new_data$Risk_AHP <- factor(new_data$Risk_AHP, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)
new_data$Risk_Mapped <- factor(new_data$Risk_Mapped, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)
new_data$Risk_OLR  <- factor(new_data$Risk_OLR , levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)
new_data
###AHP VS Mapped
(tab <- table(new_data$Risk_AHP, new_data$Risk_Mapped))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab))/sum(tab) # Misclassification Error
AHP_Mapped
### OLR VS Mapped
(tab1 <- table(new_data$Risk_Mapped, new_data$Risk_OLR))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab1))/sum(tab1) # Misclassification Error
AHP_Mapped
###AHPH VS OLR
(tab2 <- table(new_data$Risk_AHP, new_data$Risk_OLR))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab2))/sum(tab2) # Misclassification Error
AHP_Mapped
#change values InstabSum, AguaTotal, VegTogal
eq_angle = function (df){
## ANGLE
angle <-  ifelse (df$angle  == "A", 0.6336, ifelse (df$angle  == "B", 0.999,
ifelse (df$angle  == "C",  1.798,
ifelse (df$angle  == "D", 3.015,
ifelse (df$angle  == "E", 5.685,
ifelse (df$angle   =="F", 5.848, 0))))))
TC <- ifelse(df$TC == TRUE, 5.848, angle)
return(TC)
}
angle <- eq_angle(test.data)
builidng_material = function (df){
### Building material
ifelse (df$building == "B", 0.775,
ifelse (df$building == "W", 3.152,
ifelse (df$building == "M", 3.595,0)))
}
building_material <- builidng_material(test.data)
building_postion <- function (df){
### Building postion
ifelse (df$building_position == "near_base_slope", 2.145,
ifelse (df$building_position == "near_top_slope",  1.504,
ifelse (df$building_position == "far_base_slope",  0.349,
ifelse (df$building_position == "far_top_slope", 0.286,
ifelse (df$building_position == "middle_slope", 2.063)))))
}
#### density
density <- function (df)
{
ifelse (df$density == "d1", 0.952,
ifelse (df$density == "d2", 2.550,
ifelse (df$density == "d3", 2.961,
ifelse (df$density == "d4", 2.271, 0))))
}
density <- density (test.data)
### soil (Y = soil favorable to unstable slope, NO = not observed, N = soil fav to slope stability)
soil <- function (df)
{
ifelse (soil == "Y", 4.720,
ifelse (soil == "NO",  2.360,
ifelse (soil == "N", 0, 0)))
}
#### geology (Y = geol favorable to unstable slope, NO = not observed, N = geol fav to slope stability)
# soil <- soil(validation)
geology <- function (df) {
geology <-    ifelse (df$TC_geol_desfav == TRUE, 4.651, 0)
return(geology)
}
geology <- geology(test.data)
### naturage coverage
nat_coverage <- function (df){
ifelse (df$nat_coverage == "Y",  1.881,
ifelse (df$nat_coverage == "NO", 0.941,
ifelse (df$nat_coverage == "N",0, 0)))
}
# nat_coverage <-  nat_coverage(df)
## vegetation (ADD These)
vegetation <- function (df){
df$tree <-  ifelse (df$tree == 1, 0.370, 0)
df$ground_veg <- ifelse (df$ground_veg == 1, 1.137, 0)
df$deforestation <-  ifelse (df$deforestation == 1, 0.405, 0)
df$banana <-  ifelse (df$banana == 1, 1.253, 0)
vegetation <- df$tree + df$ground_veg + df$banana +  df$deforestation
return(vegetation)
}
vegetation <-   vegetation(test.data)
water <- function (df){
#### water (ADD These)
df$wastewater <-    ifelse ( df$wastewater  == 1, 0.961, 0)
df$conc_rainfall_water <- ifelse (df$conc_rainfall_water == 1, 0.977, 0)
df$leak <- ifelse (df$leak == 1, 1.949, 0)
df$septic_tank <-  ifelse (df$septic_tank == 1, 0.839, 0)
df$drainage <-  ifelse (df$drainage == "N", 0.624,
ifelse (df$drainage  == "P", 0.535,
ifelse (df$drainage == "Y", 0.099, 0)))
water <-  df$wastewater +  df$conc_rainfall_water +   df$leak + df$septic_tank + df$drainage
return(water)
}
water <- water(test.data)
instability <- function(df) {
#### instability (ADD these)
leaning_wall <-    ifelse (df$leaning_wall == 1, 9.533, 0)
tilted <-  ifelse (df$tilted == 1, 9.533, 0)
downward<-  ifelse (df$downward_floor == 1, 16.877, 0)
scars <-  ifelse ( df$scars == 1, 12.640, 0)
crack <-  ifelse (df$crack == 1, 11.016, 0)
Instab1  <- tilted + leaning_wall
Instab2 <- downward + crack
# Considering collinearity
Instab1 <-ifelse (Instab1 >= 9.533, 9.533, Instab1)
Instab2 <-ifelse (Instab2 > 11.016, 13.95, Instab2)
instability  <- (Instab1 + Instab2 + scars)*(59.6/39.05)
}
instability <- instability(test.data)
##### garbage
garbage <- function (df) {
df$lixo <- ifelse (df$garbage  == 1, 3.878, 0)
df$landfill   <- ifelse (df$landfill == 1, 3.878, 0)
df$construction_deposit <- ifelse (df$construction_deposit == 1, 3.878, 0)
garbage <-  df$garbage  +  df$landfill  + df$construction_deposit
garbage <-  ifelse(garbage >= 3.878, 3.878, 0)
return (garbage)
}
garbage <- garbage(test.data)
#
Risk_Value_Test <- angle +  building_material  + vegetation + density + water + instability+ garbage + geology + 2.063+2.145+1.504
Risk_Test <- test.data %>%
select(setor, risk)
Risk_Training <- cbind(Risk_Test, Risk_Value_Test)
colnames(Risk_Training) <- c("Sector", "RiskMapped", "RiskAHP_Test")
###Thresholds
RiskValue <-   ifelse (Risk_Value_Test < 31,  "R1",
ifelse (Risk_Value_Test >=31 & Risk_Value_Test <49,  "R2",
ifelse (Risk_Value_Test>=49 & Risk_Value_Test<69, "R3",
ifelse (Risk_Value_Test >=69, "R4", 0))))
RiskValue
new_data <- data.frame (
test.data$setor,
RiskValue,
test.data$risk
)
colnames(new_data) <-c("Sector", "Risk_AHP","Risk_Mapped")
new_data <- cbind (new_data, prediction)
colnames(new_data) <-c("Sector", "Risk_AHP","Risk_Mapped", "Risk_OLR")
new_data$Risk_AHP <- factor(new_data$Risk_AHP, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)
new_data$Risk_Mapped <- factor(new_data$Risk_Mapped, levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)
new_data$Risk_OLR  <- factor(new_data$Risk_OLR , levels=c("R1", "R2", "R3", "R4"), ordered=TRUE)
new_data
###AHP VS Mapped
(tab <- table(new_data$Risk_AHP, new_data$Risk_Mapped))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab))/sum(tab) # Misclassification Error
AHP_Mapped
### OLR VS Mapped
(tab1 <- table(new_data$Risk_Mapped, new_data$Risk_OLR))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab1))/sum(tab1) # Misclassification Error
AHP_Mapped
###AHPH VS OLR
(tab2 <- table(new_data$Risk_AHP, new_data$Risk_OLR))  # confusion matrix
AHP_Mapped <- 1-sum(diag(tab2))/sum(tab2) # Misclassification Error
AHP_Mapped
table(new_data$Risk_AHP, new_data$Risk_Mapped)  # confusion matrix
mean(as.character(new_data$Risk_AHP) != as.character(new_data$Risk_Mapped)) # Misclassification Error
View(ctable)
library(MASS)
knitr::opts_chunk$set(echo = TRUE)
vclust <- varclus (~ angle + building+EN +TC + TC_mature_Soil + TC_saprolito +  TC_weath_rock + TC_rock + TC_geol_desfav + Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte + DepTaludeAterro + landfill + garbage + construction_deposit + crack + leaning_wall + scars + downward_floor + tilted + fracture + conc_rainfall_water + wastewater + leak + septic_tank + drainage + tree + ground_veg + deforestation + banana , data=train.data)
knitr::opts_chunk$set(echo = TRUE)
vclust <- varclus (~ angle + building+EN +TC + TC_mature_Soil + TC_saprolito +  TC_weath_rock + TC_rock + TC_geol_desfav + Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte + DepTaludeAterro + landfill + garbage + construction_deposit + crack + leaning_wall + scars + downward_floor + tilted + fracture + conc_rainfall_water + wastewater + leak + septic_tank + drainage + tree + ground_veg + deforestation + banana , data=train.data)
library(MASS)
library(tidyverse)
library(readxl)
library(car)
library(stats)
library(nnet)
library(glmnet)
library(boot)
library(nlstools)
library (ggplot2)
#library(rstanarm)
library(caret)
library(nnet)
library(sure)
library(Hmisc)
library(stargazer)
library(rms)
vclust <- varclus (~ angle + building+EN +TC + TC_mature_Soil + TC_saprolito +  TC_weath_rock + TC_rock + TC_geol_desfav + Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte + DepTaludeAterro + landfill + garbage + construction_deposit + crack + leaning_wall + scars + downward_floor + tilted + fracture + conc_rainfall_water + wastewater + leak + septic_tank + drainage + tree + ground_veg + deforestation + banana , data=train.data)
par(mfrow=c(3,3))
plot.xmean.ordinaly (risk~angle + building+density+EN +TC + TC_mature_Soil + TC_saprolito +  TC_weath_rock + TC_rock + TC_geol_desfav + Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte + DepTaludeAterro + landfill + garbage + construction_deposit + crack + leaning_wall + scars + downward_floor + tilted + fracture + conc_rainfall_water + wastewater + leak + septic_tank + drainage + tree + ground_veg + deforestation + banana, data=train.data, cr=TRUE , subn=FALSE , cex.points =0.65)
# x=TRUE, y=TRUE used by resid() below
#print (f1 , latex =TRUE , coefs =5)
#stargazer(anova(f1), type="text", style="default")
eq_OLR_01 <- polr(risk~angle + building + EN + TC_saprolito +
Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte +
landfill + garbage + construction_deposit + crack +
leaning_wall + scars + downward_floor +tilted +
conc_rainfall_water + wastewater + leak + drainage, data= train.data
,  method = "logistic", Hess = TRUE)
ctable <- coef(summary(eq_OLR_01))
p<- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE*2) #computes p value
ctable <- cbind(ctable, "p value" = p )
ctable
stargazer((ctable), type="text", style="default", digits = 2)
par(mfrow=c(5,4))
plot.xmean.ordinaly (risk~ angle + building + EN + TC_saprolito +
Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte +
landfill + garbage + construction_deposit + crack +
leaning_wall + scars + downward_floor +tilted +
conc_rainfall_water + wastewater + leak + drainage
,data=train.data, cr=TRUE , subn=FALSE , cex.points =2, cex.lab=2, cex.axis=2, cex.sub=2, cex.main=2)
sf <- function (y) {
c('y>=1' = qlogis(mean(y>=1)),
'y>=2' = qlogis(mean(y>=2)),
'y>=3' = qlogis(mean(y>=3)),
'y>=4' = qlogis(mean(y>=4)))
}
s<-with(train.data, summary(as.numeric(risk)~angle + building + EN + TC_saprolito +
Taterro + DepEncNatural + DepTaludeAterro + DepTaludeCorte +
landfill + garbage + construction_deposit + crack +
leaning_wall + scars + downward_floor +tilted +
conc_rainfall_water + wastewater + leak + drainage
, fun=sf))
s
plot(s, which=1:4, pch=1:4, xlab='logit', main=' ', xlim=c(-5,5))
